import styles from './TimelineItems.module.css';
import { DateTime, Duration } from 'luxon';
import { χρονολόγιο } from '@/db/χρονολόγιο';

import TechIcon from '@/components/TechIcon';
import EventMonth from './EventMonth';
import Event from './Event';
import EventDuration from './EventDuration';
import TranslatedText from './TranslatedText';

const TimelineItems = () => {
  return (
    <>
      <div className={styles['timeline-items']}>
        {χρονολόγιο
          .filter((στιγμή) => στιγμή.γεγονός.κατηγορία === 'Προγραμματισμός')
          .map((στιγμή) => {
            const {
              ταυτότητα,
              γεγονός,
              οντότητα,
              σπουδές,
              εργασία,
              έργο,
              τεχνολογίες,
              τοποθεσία,
              κείμενο,
            } = στιγμή;

            const { είδος, κατηγορία, έναρξη, λήξη } = γεγονός;
            const { όνομα, τύπος, λογότυπο, ιστότοπος } = οντότητα;

            const {
              σχολή,
              τμήμαΉΤίτλος,
              τύποςΣπουδών,
              διάρκειαΔιδακτέαςΎλης,
              δίδακτρα,
              ολοκλήρωση,
              πιστοποιητικό,
              φωτογραφίαΠιστοποιητικού,
            } = σπουδές;

            const { θέση, τομέαςΕργασίας } = εργασία;
            const { τίτλοςΈργου } = έργο;

            const μονός = ταυτότητα % 2 !== 0 ? true : false;

            const μεΉΧωρίςΔευτερεύουσαΓραμμή =
              είδος === 'Έργα' && !όνομα
                ? 'χωρίςΔευτερεύουσαΓραμμή'
                : είδος === 'Έργα' && !τύπος
                ? 'χωρίςΔευτερεύουσαΓραμμή'
                : 'μεΔευτερεύουσαΓραμμή';

            const μορφήΠεριβλήματος =
              ολοκλήρωση === '-' && κείμενο
                ? 'coming-with-text'
                : ολοκλήρωση === '-' && !κείμενο
                ? 'coming-without-text'
                : !ολοκλήρωση && κείμενο
                ? 'unfinished-with-text'
                : !ολοκλήρωση && !κείμενο
                ? 'unfinished-without-text'
                : ολοκλήρωση && !κείμενο
                ? 'finished-without-text'
                : 'finished-with-text';

            const μονόςΖυγόςΠάνωΓραμμή = μονός
              ? 'timeline-upper-line-odd'
              : 'timeline-upper-line-even';

            const μονόςΖυγόςΔευτερεύουσαΓραμμή = μονός
              ? 'event-odd'
              : 'event-even';

            const χρώμαΕίδους =
              είδος === 'Σπουδές'
                ? '-orange'
                : είδος === 'Εργασία'
                ? '-gold'
                : είδος === 'Έργα'
                ? '-tirquaz'
                : '-normal';

            const μήναςΈναρξης = έναρξη.split('/').length === 2 ? true : false;

            const χρονολογίαΈναρξης =
              έναρξη.split('/').length === 2
                ? έναρξη.split('/')[1]
                : έναρξη.split('/')[0];

            const μήναςΛήξης =
              λήξη.split('/').length === 2 ? λήξη.split('/')[0] : '';

            const χρονολογίαΛήξης =
              λήξη.split('/').length === 2
                ? λήξη.split('/')[1]
                : λήξη.split('/')[0];

            const ημερομηνίαΈναρξης =
              έναρξη.length === 4
                ? έναρξη
                : DateTime.fromFormat(`${έναρξη}`, 'LL/yyyy');

            const ημερομηνίαΛήξης = λήξη
              ? λήξη.length === 4
                ? λήξη
                : DateTime.fromFormat(`${λήξη}`, 'LL/yyyy')
              : '';

            let διάρκειαΓεγονότοςΣεΗμέρες = λήξη
              ? parseFloat(
                  Duration.fromObject({
                    seconds: (ημερομηνίαΛήξης - ημερομηνίαΈναρξης) / 1000,
                  })
                    .as('days')
                    .toFixed(0)
                    .toString()
                )
              : 'Δ/Δ';
              
              let ημέρεςΕβδομάδεςΜήνες = ''

              if (διάρκειαΓεγονότοςΣεΗμέρες === 'Δ/Δ') {
                διάρκειαΓεγονότοςΣεΗμέρες = ''
                ημέρεςΕβδομάδεςΜήνες = 'Εν Εξελίξει'
              } else if (διάρκειαΓεγονότοςΣεΗμέρες % 30 === 0) {
                διάρκειαΓεγονότοςΣεΗμέρες = διάρκειαΓεγονότοςΣεΗμέρες / 30
                ημέρεςΕβδομάδεςΜήνες = 'Μ'
              } else if (διάρκειαΓεγονότοςΣεΗμέρες % 7 === 0) {
                διάρκειαΓεγονότοςΣεΗμέρες = διάρκειαΓεγονότοςΣεΗμέρες / 7
                ημέρεςΕβδομάδεςΜήνες = 'Β'
              } else if (διάρκειαΓεγονότοςΣεΗμέρες === 0) {
                ημέρεςΕβδομάδεςΜήνες = ''
              } else {
                ημέρεςΕβδομάδεςΜήνες = 'Η'
              }

            const διάρκειαΓεγονότος = `${διάρκειαΓεγονότοςΣεΗμέρες}${ημέρεςΕβδομάδεςΜήνες}`


            console.log('διάρκειαΓεγονότος2', διάρκειαΓεγονότος);

            const κείμενοΧρονολογίας = μονός ? (
              μήναςΈναρξης ? (
                <>
                  {/* <div className={styles['timeline-date-duration-odd']}>
                    <EventDuration διάρκειαΓεγονότοςΣεΗμέρες={διάρκειαΓεγονότοςΣεΗμέρες} />
                  </div> */}
                  <div className={styles['timeline-date-year']}>
                    {χρονολογίαΈναρξης}
                  </div>
                  <div className={styles['timeline-date-month-odd']}>
                    <EventMonth έναρξη={έναρξη} />
                  </div>
                </>
              ) : (
                <div className={styles['timeline-date-year']}>
                  {χρονολογίαΈναρξης}
                </div>
              )
            ) : μήναςΈναρξης ? (
              <>
                <div className={styles['timeline-date-month-even']}>
                  <EventMonth έναρξη={έναρξη} />
                </div>
                <div className={styles['timeline-date-year']}>
                  {χρονολογίαΈναρξης}
                </div>
                {/* <div className={styles['timeline-date-duration-even']}>
                  <EventDuration διάρκειαΓεγονότοςΣεΗμέρες={διάρκειαΓεγονότοςΣεΗμέρες} />
                </div> */}
              </>
            ) : (
              <div className={styles['timeline-date-year']}>
                {χρονολογίαΈναρξης}
              </div>
            );

            const κείμενοΔεδομένωνH3 =
              είδος === 'Σπουδές'
                ? τμήμαΉΤίτλος
                : είδος === 'Εργασία'
                ? θέση
                : είδος === 'Έργα'
                ? τίτλοςΈργου
                : τμήμαΉΤίτλος || θέση || τίτλοςΈργου;

            const κείμενοΔεδομένωνH6Βασικό =
              είδος === 'Σπουδές' || είδος === 'Εργασία' ? όνομα : null;

            const τύποςΔεδομένωνH6Βασικό =
              είδος === 'Σπουδές' || είδος === 'Εργασία' ? τύπος : null;

            const τύποςΔεδομένωνH6Δευτερεύον =
              είδος === 'Σπουδές'
                ? τοποθεσία && τοποθεσία
                : είδος === 'Εργασία'
                ? τοποθεσία && τοποθεσία
                : είδος === 'Έργα'
                ? null
                : null;

            const κείμενοΔεδομένωνH6Δευτερεύον =
              είδος === 'Σπουδές'
                ? τύποςΣπουδών && τύποςΣπουδών
                : είδος === 'Εργασία'
                ? τομέαςΕργασίας
                : είδος === 'Έργα'
                ? null
                : null;

            const τεχνολογίεςΓεγονότος =
              τεχνολογίες.length !== 0 ? (
                <div
                  className={
                    styles['tech-container'] +
                    ' ' +
                    styles[`tech-${τεχνολογίες.length}`]
                  }
                >
                  {τεχνολογίες.map((τεχνολογία) => {
                    return (
                      <TechIcon
                        key={τεχνολογία}
                        όνομαΤεχνολογίας={τεχνολογία}
                      />
                    );
                  })}
                </div>
              ) : null;

            return (
              <Event
                key={ταυτότητα}
                ταυτότητα={ταυτότητα}
                μονός={μονός}
                μορφήΠεριβλήματος={μορφήΠεριβλήματος}
                μονόςΖυγόςΠάνωΓραμμή={μονόςΖυγόςΠάνωΓραμμή}
                χρώμαΕίδους={χρώμαΕίδους}
                κείμενοΧρονολογίας={κείμενοΧρονολογίας}
                διάρκειαΓεγονότοςΣεΗμέρες={διάρκειαΓεγονότοςΣεΗμέρες}
                ημέρεςΕβδομάδεςΜήνες={ημέρεςΕβδομάδεςΜήνες}
                μονόςΖυγόςΔευτερεύουσαΓραμμή={μονόςΖυγόςΔευτερεύουσαΓραμμή}
                κείμενοΔεδομένωνH3={κείμενοΔεδομένωνH3}
                μεΉΧωρίςΔευτερεύουσαΓραμμή={μεΉΧωρίςΔευτερεύουσαΓραμμή}
                τύποςΔεδομένωνH6Βασικό={τύποςΔεδομένωνH6Βασικό}
                κείμενοΔεδομένωνH6Βασικό={κείμενοΔεδομένωνH6Βασικό}
                κείμενοΔεδομένωνH6Δευτερεύον={κείμενοΔεδομένωνH6Δευτερεύον}
                τύποςΔεδομένωνH6Δευτερεύον={τύποςΔεδομένωνH6Δευτερεύον}
                κείμενο={κείμενο}
                είδος={είδος}
                φωτογραφίαΠιστοποιητικού={φωτογραφίαΠιστοποιητικού}
                ιστότοπος={ιστότοπος}
                τεχνολογίεςΓεγονότος={τεχνολογίεςΓεγονότος}
              ></Event>
            );
          })}
      </div>
    </>
  );
};
export default TimelineItems;
